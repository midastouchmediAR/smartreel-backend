from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse
from io import BytesIO
import os
import httpx
import asyncio
import tempfile

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://aesthetic-stardust-a59f41.netlify.app",
        "http://localhost:3000"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def read_root():
    return {"status": "Backend working"}

@app.post("/generate")
async def generate_video(image: UploadFile = File(...)):
    api_key = os.getenv("RUNWAY_API_KEY")
    if not api_key:
        return JSONResponse(status_code=500, content={"error": "RUNWAY_API_KEY not set"})

    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    temp.write(await image.read())
    temp.close()

    headers = {
        "Authorization": f"Bearer {api_key}"
    }

    async with httpx.AsyncClient() as client:
        upload_resp = await client.post(
            "https://api.runwayml.com/v1/uploads",
            headers=headers,
            files={"file": open(temp.name, "rb")}
        )
        upload_resp.raise_for_status()
        uploaded_url = upload_resp.json()["url"]

        task_resp = await client.post(
            "https://api.runwayml.com/v1/tasks",
            headers=headers,
            json={
                "input": {"image": uploaded_url},
                "model": "gen-4-turbo"
            }
        )
        task_resp.raise_for_status()
        task_id = task_resp.json()["id"]
        print(f"[Runway] Created task: {task_id}")

        # Poll for result
        for _ in range(60):
            poll_resp = await client.get(f"https://api.runwayml.com/v1/tasks/{task_id}", headers=headers)
            poll_resp.raise_for_status()
            status = poll_resp.json()["status"]
            print(f"[Runway] Status: {status}")
            if status == "succeeded":
                video_url = poll_resp.json()["output"]["video"]
                print(f"[Runway] Video URL: {video_url}")
                video_data = await client.get(video_url)
                return StreamingResponse(BytesIO(video_data.content), media_type="video/mp4")
            elif status == "failed":
                return JSONResponse(status_code=500, content={"error": "Runway generation failed"})
            await asyncio.sleep(5)

    return JSONResponse(status_code=500, content={"error": "Timed out waiting for Runway video"})